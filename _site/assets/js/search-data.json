{
  
    
        "post0": {
            "title": "Animation Lesson",
            "content": "Basic Steps of Animation . Below is a sprite of Mr. Lopez. This was the first sprite created for his spritesheet, which outlines the animation of his movement frame by frame. . . Below is the spritesheet of Mr. Lopez. Each row has a different side of him, because in the project that we used this in, he was able to move freely in all 4 directions. His animation is simple, and depicts basic movement. . . The first change that we made to the spritesheet was the addition of Mr. Lopez’s cane. This was done to show a simple difference in how sprites can appear in the game. Our next step in animation will be drawing new sprites for running and idle animation. . . Below is the spritesheet of spritesheet with a few more rows idle animation, running, and punch (attack). . . Additions to Game Levels . Adding new animations gives the player new capabilities. For example, drawing sprites for running allows the player to feel as if they are running in the game, rather than walking everywhere. . In our code, running will be based on speed, so there will be different lines in the spritesheet corresponding to different speeds (i.e. row 1 = walking). . Step 1 . Download this image and change the file path to fit it. . Spritesheet Linked Here . The code is very easy to modify with new animations. The biggest change would be the changing of rows and frames, which we will be changing next. . Step 2 . Modify your rows in OOP-game-levels.md to match this. . players: { mario: { src: &quot;/filepath/lopezanimation.png&quot;, // Modify this to match your file path width: 46, height: 52.5, idle: { row: 6, frames: 1, idleFrame: {column: 1, frames: 0} }, a: { row: 1, frames: 4, idleFrame: { column: 1, frames: 0 } }, // Right Movement d: { row: 2, frames: 4, idleFrame: { column: 1, frames: 0 } }, // Left Movement runningLeft: { row: 5, frames: 4, idleFrame: {column: 1, frames: 0} }, runningRight: { row: 4, frames: 4, idleFrame: {column: 1, frames: 0} }, s: {}, // Stop the movement } }, . Step 3 . Make additions to the Player.js file. Add “speedLimit” here. . export class Player extends Character { // constructors sets up Character object constructor(canvas, image, speedRatio, playerData, speedLimit) { super(canvas, image, speedRatio, playerData.width, playerData.height); . Step 4 . Add this property of speedLimit just under your event listeners. . // Additional Property for Speed Limit this.speedLimit = speedLimit; this.currentSpeed = 0; this.acceleration = 0.11; // Adjust based on preference this.deceleration = 0.1; // Adjust based on preference . Step 5 . Apply the speedLimit under the update function. . // Player updates update() { // Adjust speed based on pressed keys if (this.pressedKeys[&#39;a&#39;] &amp;&amp; this.movement.left) { this.currentSpeed -= this.acceleration; } else if (this.pressedKeys[&#39;d&#39;] &amp;&amp; this.movement.right) { this.currentSpeed += this.acceleration; } else { // Decelerate when no movement keys are pressed this.currentSpeed *= (1 - this.deceleration); } // Apply speed limit if (Math.abs(this.currentSpeed) &gt; this.speedLimit) { this.currentSpeed = this.currentSpeed &gt; 0 ? this.speedLimit : -this.speedLimit; } . Step 6 . Now we will be adding code so that the character transitions from moving left and right to smoothly moving into a running animation. The first thing you want to do is add a threshold so that when the character reaches a certain speed the sprite image switches to that sprite row. . // Apply speed limit if (Math.abs(this.currentSpeed) &gt; this.speedLimit) { this.currentSpeed = this.currentSpeed &gt; 0 ? this.speedLimit : -this.speedLimit; } // Update player position based on speed this.x += this.currentSpeed; // Check for speed threshold to change sprite sheet rows const walkingSpeedThreshold = 1; // Walking speed threshold const runningSpeedThreshold = 5; // Running speed threshold . This will go under where it says the //Player update update(){ . Step 7 . Next we need to add code so that it can switch rows on the sprite sheet picture based on which direction you are moving. . if (Math.abs(this.currentSpeed) &gt;= runningSpeedThreshold) { // Change sprite sheet row for running if (this.currentSpeed &gt; 0) { this.setFrameY(this.playerData.runningRight.row); } else { this.setFrameY(this.playerData.runningLeft.row); } } else if (Math.abs(this.currentSpeed) &gt;= walkingSpeedThreshold) { // Change sprite sheet row for walking if (this.currentSpeed &gt; 0) { this.setFrameY(this.playerData.d.row); } else { this.setFrameY(this.playerData.a.row); } } else { // Revert to normal animation if speed is below the walking threshold this.setFrameY(this.playerData.idle.row); } // Perform super update actions super.update(); } . This piece of code goes right under the previous code that we just did. . Homework . Have the code in your game and have a smooth transition from walking to running. | Have the attack animation damage or kill and enemy (Punch animation already given). | Change the speed threshold for the charactar so it will change animations quicker or slower. | If there are any problems, please check our Player.js file linked here. .",
            "url": "http://localhost:4100/testing/2023/12/11/Lesson_IPYNB_2_.html",
            "relUrl": "/2023/12/11/Lesson_IPYNB_2_.html",
            "date": " • Dec 11, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Parallax Lesson Plan",
            "content": "Intro . Parallax scrolling occurs when there are different layers of backgrounds that move at different speeds in relation to the character to create a sense of depth. In other words, one thing is stationary while a background moves. Parallax scrolling can be beneficial by adding interest to an otherwise static website/game. Transitions from screen to screen and other transitions that happen when the user does something like press buttons, can also help the game feel smoother. . Some cool examples of Parallax Scrolling and resources: . https://kevinzhangweb.com/ | http://springsummer.gucci.com/ | https://www.spacex.com/vehicles/falcon-9/ | https://www.sketch.com/blog/what-is-a-parallax-effect/ | https://webflow.com/blog/parallax-scrolling | . Step 1 . Add the image into images/platformer/backgrounds. Then add the Background2.js into assets/js/platformer. . Step 2 . Lets get the background into the game. Define mountains as a background image; do this in the main file 2023-11-27-CSSE-oop-game-levels.md and in assets within the background asset. . mountains: { src: &quot;/images/platformer/backgrounds/mountains.jpg&quot;} . Add the second background into the “hills” constructor. . new GameLevel( {tag: &quot;hills&quot;, background: assets.backgrounds.hills, background2: assets.backgrounds.mountains, platform: assets.platforms.grass, player: assets.players.mario, tube: assets.obstacles.tube, callback: testerCallBack } ); . Then go to the GameLevel.js file and add this to the constructor. . this.backgroundImg2 = gameObject.background2?.file; . Then we need to load the image using this code. . if (this.backgroundImg2) { imagesToLoad.push(this.loadImage(this.backgroundImg2)); } . After we load the code we then have to create the new background. Make sure this is above the backgroundImg so it will create the canvas behind the original background. . if (this.backgroundImg2) { const backgroundCanvas = document.createElement(&quot;canvas&quot;); backgroundCanvas.id = &quot;background&quot;; document.querySelector(&quot;#canvasContainer&quot;).appendChild(backgroundCanvas); const backgroundSpeedRatio = 0; new Background2(backgroundCanvas, loadedImages[i], backgroundSpeedRatio); i++; } . Now we have the image in the code but we still need a different file to help create this second background. Make a new js file called Background2.js. You can use the regular background code just make sure to call it Background2 and export background2. . Step 3 . Now that we have the image into the game we can start to make it move. First we need to navigate to the GameEnv.js file. Now make a new variable for the background speed and set it to zero. . static backgroundSpeed2 = 0; . Now that we have this this variable we can use it in the background update funtion. If you change this variable in GameEnv.js it should make the background move. . this.speed = GameEnv.backgroundSpeed2; . Now the background moves but we need it to move when the player moves. Now go to the Player.js file. We will add an if statement within the keydown function to detect when “a” is pressed and move the background right, and when “d” is pressed move the background left. Just make sure the backgroundSpeed2 variable is set to 0. . if (key === &quot;a&quot;) { GameEnv.backgroundSpeed2 = -0.1; } if (key === &quot;d&quot;) { GameEnv.backgroundSpeed2 = 0.1; } . Now the background moves when the character moves but it dosent stop. We can add these same if statements to the keyup function but just set the variable to 0. This should stop the background from moving when the player moves. . if (key === &quot;a&quot;) { GameEnv.backgroundSpeed2 = 0; } if (key === &quot;d&quot;) { GameEnv.backgroundSpeed2 = 0; } . Also need to change the starting x value otherwise we run into some issues. . export class Background2 extends GameObject { constructor(canvas, image, speedRatio) { super(canvas, image, speedRatio); this.x = -1000; } . Now the background moves with the player. In order to get a full parallax effect both backgrounds need to be moving at different speeds. The background in the foreground should move faster then the one in the back. We can do this by using all the same code but in the Background.js file instead of the Background2.js file. . // add this to GameEnv.js static backgroundSpeed = 0; // add this to Background.js this.speed = GameEnv.backgroundSpeed; // add this to the keydown if statements in player.js GameEnv.backgroundSpeed = -0.4; GameEnv.backgroundSpeed = 0.4; // add this to the keyup if statements in player.js GameEnv.backgroundSpeed = 0; GameEnv.backgroundSpeed = 0; . That should all work but you might notice a weird shadow. To fix this we can clear the canvas before it draws it so add this to the update function in Background.js . this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); . Step 4 . We can also add transitions to buttons and moving from screen to screen. Add keyframes in the main game file in the brackets, in this case fade in and fadeout change opacity and flashing makes button flash with 0.5s between each flash. Referencing the ids created in the GameLevel.js file “background” and “platform.” . &lt;style&gt; #gameBegin, #controls, #gameOver { position: relative; z-index: 2; /*Ensure the controls are on top*/ } #toggleCanvasEffect, #background, #platform { animation: fadein 5s; } #startGame { animation: flash 0.5s infinite; } @keyframes flash { 50% { opacity: 0; } } @keyframes fadeout { from {opacity: 1} to {opacity: 0} } @keyframes fadein { from {opacity: 0} to {opacity: 1} } &lt;/style&gt; . Homework . Add transitions | Add both moving backgrounds | Make backgrounds move with the player | . Challenge . Add transition effect to from the mario level to the alien level | .",
            "url": "http://localhost:4100/testing/2023/12/10/Parallax_Lesson_IPYNB_2_.html",
            "relUrl": "/2023/12/10/Parallax_Lesson_IPYNB_2_.html",
            "date": " • Dec 10, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Lesson for Enemy",
            "content": "Lesson - Enemy . In this lesson, we’ll be going over the different characteristics in which all enemies need, and how eventually you will add a fully functional enemy into your own game. . Instructions . Make sure to be following along, so you’ll have the best time understanding the content. As we go over the lesson, keep in mind what you’ll exactly need to do for in order to make the player work. Here is a brief list of essential things that the enemy must do. . Ability to move | Interaction with Player | Ability to be killed by player | Must be in OOP | . Once we go over how the enemy works, it will be YOUR job implementing into your own game. Snippets and this guide will be resources you can use to refer back on how to make your enemy. . Step 1 - Creating the Enemy . The first step in creating the enemy in the game is creating a new file just for it. The file should be in assets/js/platformer and should called either Enemy.js, Goomba.js or something related. Once you have created the file, we shall now start defining the Enemy class. . import Character from &#39;./Character.js&#39;; import GameEnv from &#39;./GameEnv.js&#39;; export class Enemy extends Character { // constructors sets up Character object constructor(canvas, image, speedRatio, enemyData){ super(canvas, image, speedRatio, enemyData.width, enemyData.height, ); // Player Data is required for Animations this.enemyData = enemyData; . } export default Enemy . This code is essentially the same as the player code with few differences. The Enemy class is being extended to the Character class, and once extended, we can start defining the different properties in which our enemy will have. . After configuring the enemy in Enemy.js, you will then have to connect Enemy to the main game. There are two files in which you’ll have to do this. The main file in which the game is initialized and GameLevels.js in where the enemy is actually created as an instance. . First, we’ll be adding the enemy into the main file. You’ll notice here that there is a variable that defines all the different assets of the game. Players, Backgrounds, Obstacles, etc. Seeing how everything in the game is defined here, it’d be reasonable to say the enemy will be defined in the assets variable as well. . var assets = { //previous code above ... players: { mario: { src: &quot;/images/platformer/sprites/mario.png&quot;, width: 256, height: 256, w: { row: 10, frames: 15 }, wa: { row: 11, frames: 15 }, wd: { row: 10, frames: 15 }, a: { row: 3, frames: 7, idleFrame: { column: 7, frames: 0 } }, s: { }, d: { row: 2, frames: 7, idleFrame: { column: 7, frames: 0 } } }, }, } . Here is a snippet on how one of the players is defined. We can base our enemy after the player. Our player has an image (src), a width, and a height. The rest doesn’t apply to our enemy. . var assets { enemies: { goomba: { src: &quot;/images/platformer/sprites/goomba.png&quot;, width: 448, height: 452, } } } . Once we define the goomba in assets, we’ll have to add it to the gameLevel (refer to the code). . new GameLevel( {tag: &quot;hills&quot;, background: assets.backgrounds.hills, platform: assets.platforms.grass, player: assets.players.mario, enemy: assets.enemies.goomba, tube: assets.obstacles.tube, callback: testerCallBack } ); . Step 2 - Basic Features . Now that we have the enemy actually defined and created within our game, we can now begin the process of giving our enemy its necessary attributes. The first of these attributes will be movement. . Movement is quite easy to implement. We just need the user of the enemy to continually check its position and based on its position, decide in which direction it needs to go. . The following is how this can be done (this will be added onto the Enemy class): . update() { // Check if the enemy is at the left or right boundary if (this.x &lt;= 0 || this.x + this.width &gt;= GameEnv.innerWidth) { // Change direction by reversing the speed this.speed = -this.speed; } //Initially get the enemy moving this.x += this.speed; } . The code is using an if statement to check whether the player is on the left side of the canvas or all the way on the right side, the direction of the goomba will reverse. . //Talk about how there is code below to initially get the player moving . Now that the Goomba can travel across the canvas, it will hence now eventually cross paths with the player. The next step would be to add collisions between the Goomba and Character, so that the two characters can interact with one another. . The thing about collisions however is Mr. Mortensen has already laid out the foundation for the collision code. We won’t have to code the actual logic for collisions, rather a simpler version of such. Code for collisions will be handled in Player.js rather than in the Enemy file, hence the following is an excerpt from the Player code: . // Enemy collision if (this.collisionData.touchPoints.other.id === &quot;enemy&quot;) { // Collision with the left side of the Enemy if (this.collisionData.touchPoints.other.left) { // Kill Player (Reset Game) } // Collision with the right side of the Enemy if (this.collisionData.touchPoints.other.right) { deathController.setDeath(1); // Kill Player (Reset Game) } // Collision with the top of the Enemy if (this.collisionData.touchPoints.other.ontop) { // Kill Goomba // Make Mario Bounce } } . Step 3 - Homework / Extra Features . Implement the enemy into your game | Add what happens in the event of a collision | Add special events occur at random | Give your Goomba something unique | .",
            "url": "http://localhost:4100/testing/2023/12/05/enemy_lesson.html",
            "relUrl": "/2023/12/05/enemy_lesson.html",
            "date": " • Dec 5, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "JS Mario 2-Platform",
            "content": "%%html &lt;style&gt; #canvas { margin: 0; border: 1px solid white; } &lt;/style&gt; &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt; &lt;script&gt; // Create empty canvas let canvas = document.getElementById(&#39;canvas&#39;); let c = canvas.getContext(&#39;2d&#39;); // Set the canvas dimensions canvas.width = 650; canvas.height = 400; // Define gravity value let gravity = 1.5; // Define the Player class class Player { constructor() { // Initial position and velocity of the player this.position = { x: 100, y: 200 }; this.velocity = { x: 0, y: 0 }; // Dimensions of the player this.width = 30; this.height = 30; } // Method to draw the player on the canvas draw() { c.fillStyle = &#39;red&#39;; c.fillRect(this.position.x, this.position.y, this.width, this.height); } // Method to update the players position and velocity update() { this.draw(); this.position.y += this.velocity.y; this.position.x += this.velocity.x; // Apply gravity if player is not at the bottom if (this.position.y + this.height + this.velocity.y &lt;= canvas.height) this.velocity.y += gravity; else this.velocity.y = 0; } } //-- // NEW CODE - PLATFORM //-- // Define the Platform class class Platform { constructor(image) { // Initial position of the platform this.position = { x: 0, y: 300 } this.image = image; this.width = 650; this.height = 100; } // Method to draw the platform on the canvas draw() { c.drawImage(this.image, this.position.x, this.position.y, this.width, this.height); } } //-- // NEW CODE - CREATE PLATFORM OBJECT WITH IMAGE //-- // Load platform image let image = new Image(); image.src = // Create a platform object let platform = new Platform(image); // Create a player object player = new Player(); // Define keyboard keys and their states let keys = { right: { pressed: false }, left: { pressed: false } } // Animation function to continuously update and render the canvas function animate() { requestAnimationFrame(animate); c.clearRect(0, 0, canvas.width, canvas.height); //-- // NEW CODE - DRAW PLATFORM //-- platform.draw(); player.update(); // Control players horizontal movement if (keys.right.pressed &amp;&amp; player.position.x + player.width &lt;= canvas.width - 50) { player.velocity.x = 15; } else if (keys.left.pressed &amp;&amp; player.position.x &gt;= 50) { player.velocity.x = -15; } else { player.velocity.x = 0; } //-- // NEW CODE - PLATFORM COLLISIONS //-- // Check for collision between player and platform if ( player.position.y + player.height &lt;= platform.position.y &amp;&amp; player.position.y + player.height + player.velocity.y &gt;= platform.position.y &amp;&amp; player.position.x + player.width &gt;= platform.position.x &amp;&amp; player.position.x &lt;= platform.position.x + platform.width ) { player.velocity.y = 0; } } // Start the animation loop animate(); // Event listener for keydown events addEventListener(&#39;keydown&#39;, ({ keyCode }) =&gt; { switch (keyCode) { case 65: console.log(&#39;left&#39;); keys.left.pressed = true; break; case 83: console.log(&#39;down&#39;); break; case 68: console.log(&#39;right&#39;); keys.right.pressed = true; break; case 87: console.log(&#39;up&#39;); player.velocity.y -= 20; break; } }); // Event listener for keyup events addEventListener(&#39;keyup&#39;, ({ keyCode }) =&gt; { switch (keyCode) { case 65: console.log(&#39;left&#39;); keys.left.pressed = false; break; case 83: console.log(&#39;down&#39;); break; case 68: console.log(&#39;right&#39;); keys.right.pressed = false; break; case 87: console.log(&#39;up&#39;); player.velocity.y = -20; break; } }) &lt;/script&gt; . Specific Hack . Add creative “death pits” (gap between platforms) that restart game if fallen through | . Open Ended Hack . Experiment with different terrains (ice could cause sliding) | .",
            "url": "http://localhost:4100/testing/2023/12/04/mario_platform_IPYNB_2_.html",
            "relUrl": "/2023/12/04/mario_platform_IPYNB_2_.html",
            "date": " • Dec 4, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Mario Platforms Lesson",
            "content": "Mario Platforms . Using OOP . We use Object Orientated Programming to complete this task. OOP uses objects, classes, variables, and includes a plethora of other items to create, in this case, a developed and fully functional javascript game! Follow along as we go through the steps to make 3 of the following additions: A platform, a coin, and a scoreboard. | . Making A Platform . First, we need to make a new .js file to store our information | We named ours PlatformO.js | Include the following code to make sure that it runs with the rest of the game | . import GameEnv from &#39;./GameEnv.js&#39;; import GameObject from &#39;./GameObject.js&#39;; export class PlatformO extends GameObject { constructor(canvas, image) { super(canvas, image, 0); } // Required, but no update action update() { } // Draw position is always 0,0 draw() { this.ctx.drawImage(this.image, 0, 0); } // Set platform position size() { // Formula for Height should be on constant ratio, using a proportion of 832 const scaledHeight = GameEnv.innerHeight * (60/832); // Formula for Width is scaled: scaledWidth/scaledHeight == this.width/this.height const scaledWidth = 150; const platformX = .1 * GameEnv.innerWidth; const platformY = (GameEnv.bottom - scaledHeight) - 150; // set variables used in Display and Collision algorithms this.bottom = platformY; this.collisionHeight = scaledHeight; this.collisionWidth = scaledWidth; //this.canvas.width = this.width; //this.canvas.height = this.height; this.canvas.style.width = `${scaledWidth}px`; this.canvas.style.height = `${scaledHeight}px`; this.canvas.style.position = &#39;absolute&#39;; this.canvas.style.left = `${platformX}px`; this.canvas.style.top = `${platformY}px`; } } export default PlatformO; . Constructor and Super . Constructor is used to initialize an object and to set it’s values | Super is used to inherit traits from a parent object. . | Most of the values are changeable; we can change the position, size, and so on for the platform. Be sure to experiment! | .",
            "url": "http://localhost:4100/testing/2023/12/04/Platforms_lesson_IPYNB_2_.html",
            "relUrl": "/2023/12/04/Platforms_lesson_IPYNB_2_.html",
            "date": " • Dec 4, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Platforms_lesson",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “— n”, “layout: post n”, “title: Mario Platforms Lesson n”, “description: A lesson designed to help you create your own platform for your game n”, “courses: { csse: {week: 8 } } n”, “type: ccc n”, “author: Gavin Copley, Zafeer Ahmed, Ryan Nguyen n”, “—” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “&lt;a href=&quot;https://ryann96.github.io/Team-Project/mariogame&quot;&gt;Mario Platforms&lt;/a&gt;” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Using OOP n”, “- We use Object Orientated Programming to complete this task. OOP uses objects, classes, variables, and includes a plethora of other items to create, in this case, a developed and fully functional javascript game! Follow along as we go through the steps to make 3 of the following additions: A platform, a coin, and a scoreboard.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Making A Platform n”, “- First, we need to make a new .js file to store our information n”, “- We named ours PlatformO.js n”, “- Include the following code to make sure that it runs with the rest of the game” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: { “vscode”: { “languageId”: “javascript” } }, “outputs”: [], “source”: [ “import GameEnv from ‘./GameEnv.js’; n”, “import GameObject from ‘./GameObject.js’; n”, “ n”, “export class PlatformO extends GameObject { n”, “ constructor(canvas, image) { n”, “ super(canvas, image, 0); n”, “ } n”, “ n”, “ // Required, but no update action n”, “ update() { n”, “ } n”, “ n”, “ // Draw position is always 0,0 n”, “ draw() { n”, “ this.ctx.drawImage(this.image, 0, 0); n”, “ } n”, “ n”, “ // Set platform position n”, “ size() { n”, “ // Formula for Height should be on constant ratio, using a proportion of 832 n”, “ const scaledHeight = GameEnv.innerHeight * (60/832); n”, “ // Formula for Width is scaled: scaledWidth/scaledHeight == this.width/this.height n”, “ const scaledWidth = 150; n”, “ const platformX = .1 * GameEnv.innerWidth; n”, “ const platformY = (GameEnv.bottom - scaledHeight) - 150; n”, “ n”, “ // set variables used in Display and Collision algorithms n”, “ this.bottom = platformY; n”, “ this.collisionHeight = scaledHeight; n”, “ this.collisionWidth = scaledWidth; n”, “ n”, “ //this.canvas.width = this.width; n”, “ //this.canvas.height = this.height; n”, “ this.canvas.style.width = ${scaledWidth}px; n”, “ this.canvas.style.height = ${scaledHeight}px; n”, “ this.canvas.style.position = ‘absolute’; n”, “ this.canvas.style.left = ${platformX}px; n”, “ this.canvas.style.top = ${platformY}px; n”, “ n”, “ } n”, “} n”, “ n”, “export default PlatformO;” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Constructor and Super n”, “- Constructor is used to initialize an object and to set it’s values n”, “- Super is used to inherit traits from a parent object.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “- Most of the values are changeable; we can change the position, size, and so on for the platform. Be sure to experiment!” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [] } ], “metadata”: { “language_info”: { “name”: “python” }, “orig_nbformat”: 4 }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "http://localhost:4100/testing/2023/12/04/Platforms_lesson.ipynb",
            "relUrl": "/2023/12/04/Platforms_lesson.ipynb",
            "date": " • Dec 4, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Platform Game",
            "content": "",
            "url": "http://localhost:4100/testing/2023/12/04/Platform_Game.html",
            "relUrl": "/2023/12/04/Platform_Game.html",
            "date": " • Dec 4, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Dynamic Game Levels",
            "content": "Start Game Invert Restart",
            "url": "http://localhost:4100/testing/mariogame",
            "relUrl": "/mariogame",
            "date": " • Nov 27, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Test_page",
            "content": "test | .",
            "url": "http://localhost:4100/testing/2023/11/13/Test_Page.html",
            "relUrl": "/2023/11/13/Test_Page.html",
            "date": " • Nov 13, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "JS Mario Animation",
            "content": ". . &lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;img src=&quot;/testing//images/logo.png&quot; height=&quot;60&quot; title=&quot;Frontend&quot; alt=&quot;&quot;&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/testing/navigation/csse&quot;&gt;CSSE&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/testing/navigation/csp&quot;&gt;CSP&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/testing/navigation/csa&quot;&gt;CSA&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/testing/navigation/game&quot;&gt;Game&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;! Liquid concatentation &gt; &lt;! Liquid list variable created from file containing mario metatdata for sprite &gt; &lt;! Liquid integer assignment &gt; &lt;! HTML for page contains &lt;p&gt; tag named &quot;mario&quot; and class properties for a &quot;sprite&quot; --&gt; &lt;p id=&quot;mario&quot; class=&quot;sprite&quot;&gt;&lt;/p&gt; &lt;! Embedded Cascading Style Sheet (CSS) rules, defines how HTML elements look &gt; &lt;style&gt; /*CSS style rules for the elements id and class above... */ .sprite { height: 256px; width: 256px; background-image: url(&#39;/testing/images/mario_animation.png&#39;); background-repeat: no-repeat; } /*background position of sprite element */ #mario { background-position: calc( * 256 * -1px) calc( * 256* -1px); } &lt;/style&gt; &lt;! Embedded executable code&gt; &lt;script&gt; ////////// convert yml hash to javascript key value objects ///////// var mario_metadata = {}; //key, value object var key = &quot;Rest&quot; //key var values = {} //values object values[&quot;row&quot;] = 0 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 15 mario_metadata[key] = values; //key with values added var key = &quot;RestL&quot; //key var values = {} //values object values[&quot;row&quot;] = 1 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 15 mario_metadata[key] = values; //key with values added var key = &quot;Walk&quot; //key var values = {} //values object values[&quot;row&quot;] = 2 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 8 mario_metadata[key] = values; //key with values added var key = &quot;Tada&quot; //key var values = {} //values object values[&quot;row&quot;] = 2 values[&quot;col&quot;] = 11 values[&quot;frames&quot;] = 3 mario_metadata[key] = values; //key with values added var key = &quot;WalkL&quot; //key var values = {} //values object values[&quot;row&quot;] = 3 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 8 mario_metadata[key] = values; //key with values added var key = &quot;TadaL&quot; //key var values = {} //values object values[&quot;row&quot;] = 3 values[&quot;col&quot;] = 11 values[&quot;frames&quot;] = 3 mario_metadata[key] = values; //key with values added var key = &quot;Run1&quot; //key var values = {} //values object values[&quot;row&quot;] = 4 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 15 mario_metadata[key] = values; //key with values added var key = &quot;Run1L&quot; //key var values = {} //values object values[&quot;row&quot;] = 5 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 15 mario_metadata[key] = values; //key with values added var key = &quot;Run2&quot; //key var values = {} //values object values[&quot;row&quot;] = 6 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 15 mario_metadata[key] = values; //key with values added var key = &quot;Run2L&quot; //key var values = {} //values object values[&quot;row&quot;] = 7 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 15 mario_metadata[key] = values; //key with values added var key = &quot;Puff&quot; //key var values = {} //values object values[&quot;row&quot;] = 8 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 15 mario_metadata[key] = values; //key with values added var key = &quot;PuffL&quot; //key var values = {} //values object values[&quot;row&quot;] = 9 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 15 mario_metadata[key] = values; //key with values added var key = &quot;Cheer&quot; //key var values = {} //values object values[&quot;row&quot;] = 10 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 15 mario_metadata[key] = values; //key with values added var key = &quot;CheerL&quot; //key var values = {} //values object values[&quot;row&quot;] = 11 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 15 mario_metadata[key] = values; //key with values added var key = &quot;Flip&quot; //key var values = {} //values object values[&quot;row&quot;] = 12 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 15 mario_metadata[key] = values; //key with values added var key = &quot;FlipL&quot; //key var values = {} //values object values[&quot;row&quot;] = 13 values[&quot;col&quot;] = 0 values[&quot;frames&quot;] = 15 mario_metadata[key] = values; //key with values added ////////// animation control object ///////// class Mario { constructor(meta_data) { this.tID = null; //capture setInterval() task ID this.positionX = 0; // current position of sprite in X direction this.currentSpeed = 0; this.marioElement = document.getElementById(&quot;mario&quot;); //HTML element of sprite this.pixels = 256; //pixel offset of images in the sprite, set by liquid constant this.interval = 100; //animation time interval this.obj = meta_data; this.marioElement.style.position = &quot;absolute&quot;; } animate(obj, speed) { let frame = 0; const row = obj.row * this.pixels; this.currentSpeed = speed; this.tID = setInterval(() =&gt; { const col = (frame + obj.col) * this.pixels; this.marioElement.style.backgroundPosition = `-${col}px -${row}px`; this.marioElement.style.left = `${this.positionX}px`; this.positionX += speed; frame = (frame + 1) % obj.frames; const viewportWidth = window.innerWidth; if (this.positionX &gt; viewportWidth - this.pixels) { document.documentElement.scrollLeft = this.positionX - viewportWidth + this.pixels; } }, this.interval); } startWalking() { this.stopAnimate(); this.animate(this.obj[&quot;Walk&quot;], 3); } startRunning() { this.stopAnimate(); this.animate(this.obj[&quot;Run1&quot;], 6); } startPuffing() { this.stopAnimate(); this.animate(this.obj[&quot;Puff&quot;], 0); } startCheering() { this.stopAnimate(); this.animate(this.obj[&quot;Cheer&quot;], 0); } startFlipping() { this.stopAnimate(); this.animate(this.obj[&quot;Flip&quot;], 0); } startResting() { this.stopAnimate(); this.animate(this.obj[&quot;Rest&quot;], 0); } stopAnimate() { clearInterval(this.tID); } } const mario = new Mario(mario_metadata); ////////// event control ///////// window.addEventListener(&quot;keydown&quot;, (event) =&gt; { if (event.key === &quot;ArrowRight&quot;) { event.preventDefault(); if (event.repeat) { mario.startCheering(); } else { if (mario.currentSpeed === 0) { mario.startWalking(); } else if (mario.currentSpeed === 3) { mario.startRunning(); } } } else if (event.key === &quot;ArrowLeft&quot;) { event.preventDefault(); if (event.repeat) { mario.stopAnimate(); } else { mario.startPuffing(); } } }); //touch events that enable animations window.addEventListener(&quot;touchstart&quot;, (event) =&gt; { event.preventDefault(); // prevent default browser action if (event.touches[0].clientX &gt; window.innerWidth / 2) { // move right if (currentSpeed === 0) { // if at rest, go to walking mario.startWalking(); } else if (currentSpeed === 3) { // if walking, go to running mario.startRunning(); } } else { // move left mario.startPuffing(); } }); //stop animation on window blur window.addEventListener(&quot;blur&quot;, () =&gt; { mario.stopAnimate(); }); //start animation on window focus window.addEventListener(&quot;focus&quot;, () =&gt; { mario.startFlipping(); }); //start animation on page load or page refresh document.addEventListener(&quot;DOMContentLoaded&quot;, () =&gt; { // adjust sprite size for high pixel density devices const scale = window.devicePixelRatio; const sprite = document.querySelector(&quot;.sprite&quot;); sprite.style.transform = `scale(${0.2 * scale})`; mario.startResting(); }); &lt;/script&gt; .",
            "url": "http://localhost:4100/testing/c5.0/c7.0/c7.6/2023/09/06/javascript-motion-mario-oop.html",
            "relUrl": "/c5.0/c7.0/c7.6/2023/09/06/javascript-motion-mario-oop.html",
            "date": " • Sep 6, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "GitHub Overview",
            "content": "References . GitHub Review GitHub concepts 2-min . Git source control VSCode . . Create GitHub Page Repository . You will want to create a personal Github Pages blog for this class. This is a place where you can code, complete the hacks, and record what you have learned. . Git Config . Run the following commands to configure user git connection to GitHub. This is required, before pushing code to GitHub. . bash # Setup GitHub ID git config --global user.email &lt;your email&gt; git config --global user.name &lt;your github id&gt; # Verify Setup git config --list . click to Create Repository . Use Template to create student repository . | Once your repository is created, click on the green “Code” button and copy the HTTPS link provided. . | In Terminal, to your vscode directory (cd ~/vscode). Then clone the repository with git clone &lt;paste from previous step&gt;. . | Open your repository in VS Code with code &lt;repository name&gt;. Cloud Terminal requires you to open after lanuching VSCode. . | VSCode commit/sync to GitHub Pages . The VSCode saved files are only stored on your computer locally until you commit and then sync the changes. . Commit Changes, version control locally . This creates a version of your files in you local git database. Often developers commit several times before they sync in VSCode or push from command line. This allows lots of small changes that can be easily reviewed and rolled back. . Click on the button that supports “Source Control” in VS Code’s left sidebar . | Click on the plus sign to stage your changes . . | Enter a message for your commit in the message box. . | Click the “Commit button” . | Sync Changes, update change in GitHub . Sync will push files to GitHub and create an Action for GitHub Pages updates, site will update if code is without errors. . Click the Menu button and then click “Push”. . . | Watch Actions until done, open action link and review changes on github.io . | .",
            "url": "http://localhost:4100/testing/2023/08/26/GitHub_Sync.html",
            "relUrl": "/2023/08/26/GitHub_Sync.html",
            "date": " • Aug 26, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Student GitHub Pages",
            "content": "Create your own GitHub Pages Project . Make you own project from GitHub Pages Student Repo. . Make a GitHub Pages Repository . Goto GitHub student. . Reference: Create from template. Most student will pick this option. . | Reference: Fork a repo. Student in CSA that teacher has asked to contribute to student example repo will pick this. . | . Start the GitHub Pages Student Project . Run the following commands using terminal on you machine. Be sure Repo has been forked. . Clone and Open project in VSCode | Change “forkme” text with your “ghid” or selected location | . (base) id:~$ mkdir vscode # make a vscode directory, if you don&#39;t have one (base) id:~$ cd vscode # change to the directory (base) id:~$ git clone https://github.com/forkme/student.git # change to your repo (base) id:~$ cd student # change to the project directory (base) id:~$ code . # open VSCode in project directory . VSCode for Python Extensions, adapt for your needs JavaScript, Python, Java . VSCode Language extensions Install Python, Python Environment Manager, Python Extension Pack, Pylance | Install Jupyter, Jupyter Keymap | Install IntelliCode, IntelliCode API Usage Examples | Windows machines install WSL Remote Development | . | . %%HTML &lt;!-- Here is a little preview of HTML to Describe VSCode Marketplace --&gt; &lt;div&gt; &lt;div style=&quot;float: left; margin: 0px 10px 10px 0px;&quot;&gt; &lt;a href=&quot;https://marketplace.visualstudio.com/vscode&quot;&gt; &lt;img alt=&quot;Extensions&quot; src=&quot;/testing/images/extensions.png&quot; title=&quot;VS Code Marketplace&quot; width=&quot;250&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;div&gt; &lt;hr&gt; &lt;p&gt; Visual Studio Code claims to provide just the tools a developer needs for a quick code-build-debug and version control cycle. It provides a Market Place for enhancements and more complex workflows. &lt;mark&gt;Before adding extensions, clone projects&lt;/mark&gt; and see what is requested or added. Here are some extension that were added through that process or that I have added... &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;mark&gt;In marketplace&lt;/mark&gt; there are several extensions for Python, Python Intellisense, Python Extension Pack &lt;/li&gt; &lt;li&gt; &lt;mark&gt;Jupyter&lt;/mark&gt;: This supports build jupyter ipynb files from within VS Code &lt;/li&gt; &lt;li&gt; &lt;mark&gt;Code Spell Checker&lt;/mark&gt;: Got to have it when building documents, particularly if you spell and typo like the Teacher &lt;/li&gt; &lt;li&gt; &lt;mark&gt;IntelliCode&lt;/mark&gt;: Got to have it when creating a code file, it will sense type of code by extension. Also, it help with syntax as you are coding. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;mark&gt;Review Details in Marketplace for better explanation of purpose of the things explained above&lt;/mark&gt;. There is a lot more! As you need Git help look at things like &lt;mark&gt;Git History and GitLens&lt;/mark&gt;. Or, perhaps you enjoy Vim and want Vim emulation for editing, their is an extension for that. Later, there may be interest in AWS Toolkit or Deploy extensions. We will learn more about Marketplace Extensions as we do more. &lt;/p&gt; &lt;hr&gt; &lt;/div&gt; &lt;/div&gt; . . Visual Studio Code claims to provide just the tools a developer needs for a quick code-build-debug and version control cycle. It provides a Market Place for enhancements and more complex workflows. Before adding extensions, clone projects and see what is requested or added. Here are some extension that were added through that process or that I have added... . In marketplace there are several extensions for Python, Python Intellisense, Python Extension Pack | Jupyter: This supports build jupyter ipynb files from within VS Code | Code Spell Checker: Got to have it when building documents, particularly if you spell and typo like the Teacher | IntelliCode: Got to have it when creating a code file, it will sense type of code by extension. Also, it help with syntax as you are coding. | . Review Details in Marketplace for better explanation of purpose of the things explained above. There is a lot more! As you need Git help look at things like Git History and GitLens. Or, perhaps you enjoy Vim and want Vim emulation for editing, their is an extension for that. Later, there may be interest in AWS Toolkit or Deploy extensions. We will learn more about Marketplace Extensions as we do more. . . Hacks . Setup Tools and test GitHub connection. Tool and Equipment setup is like attendance, without Tools and Equipment you are effectually absent. . Change index.md to show it is REALLY YOURS. Refer to Markdown Cheet Sheet. Push a minor “index.md” change and Verify on GitHub https://code.visualstudio.com/docs/editor/versioncontrol#_git-support | Verify “index.md” change on deployed GitHub Pages | . | .",
            "url": "http://localhost:4100/testing/c4.1/2023/08/21/VSCode-GitHub_Pages_IPYNB_2_.html",
            "relUrl": "/c4.1/2023/08/21/VSCode-GitHub_Pages_IPYNB_2_.html",
            "date": " • Aug 21, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "IPYNB HTML, img",
            "content": "Create your own GitHub Pages Project . Make you own project from GitHub Pages Student Repo. . Make a GitHub Pages Repository . Goto GitHub student. . Reference: Create from template. Most student will pick this option. . | Reference: Fork a repo. Student in CSA that teacher has asked to contribute to student example repo will pick this. . | . Start the GitHub Pages Student Project . Run the following commands using terminal on you machine. Be sure Repo has been forked. . Clone and Open project in VSCode | Change “forkme” text with your “ghid” or selected location | . (base) id:~$ mkdir vscode # make a vscode directory, if you don&#39;t have one (base) id:~$ cd vscode # change to the directory (base) id:~$ git clone https://github.com/forkme/student.git # change to your repo (base) id:~$ cd student # change to the project directory (base) id:~$ code . # open VSCode in project directory . VSCode for Python Extensions, adapt for your needs JavaScript, Python, Java . VSCode Language extensions Install Python, Python Environment Manager, Python Extension Pack, Pylance | Install Jupyter, Jupyter Keymap | Install IntelliCode, IntelliCode API Usage Examples | Windows machines install WSL Remote Development | . | . %%HTML &lt;!-- Here is a little preview of HTML to Describe VSCode Marketplace --&gt; &lt;div&gt; &lt;div style=&quot;float: left; margin: 0px 10px 10px 0px;&quot;&gt; &lt;a href=&quot;https://marketplace.visualstudio.com/vscode&quot;&gt; &lt;img alt=&quot;Extensions&quot; src=&quot;/testing/images/extensions.png&quot; title=&quot;VS Code Marketplace&quot; width=&quot;250&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;div&gt; &lt;hr&gt; &lt;p&gt; Visual Studio Code claims to provide just the tools a developer needs for a quick code-build-debug and version control cycle. It provides a Market Place for enhancements and more complex workflows. &lt;mark&gt;Before adding extensions, clone projects&lt;/mark&gt; and see what is requested or added. Here are some extension that were added through that process or that I have added... &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;mark&gt;In marketplace&lt;/mark&gt; there are several extensions for Python, Python Intellisense, Python Extension Pack &lt;/li&gt; &lt;li&gt; &lt;mark&gt;Jupyter&lt;/mark&gt;: This supports build jupyter ipynb files from within VS Code &lt;/li&gt; &lt;li&gt; &lt;mark&gt;Code Spell Checker&lt;/mark&gt;: Got to have it when building documents, particularly if you spell and typo like the Teacher &lt;/li&gt; &lt;li&gt; &lt;mark&gt;IntelliCode&lt;/mark&gt;: Got to have it when creating a code file, it will sense type of code by extension. Also, it help with syntax as you are coding. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;mark&gt;Review Details in Marketplace for better explanation of purpose of the things explained above&lt;/mark&gt;. There is a lot more! As you need Git help look at things like &lt;mark&gt;Git History and GitLens&lt;/mark&gt;. Or, perhaps you enjoy Vim and want Vim emulation for editing, their is an extension for that. Later, there may be interest in AWS Toolkit or Deploy extensions. We will learn more about Marketplace Extensions as we do more. &lt;/p&gt; &lt;hr&gt; &lt;/div&gt; &lt;/div&gt; . . Visual Studio Code claims to provide just the tools a developer needs for a quick code-build-debug and version control cycle. It provides a Market Place for enhancements and more complex workflows. Before adding extensions, clone projects and see what is requested or added. Here are some extension that were added through that process or that I have added... . In marketplace there are several extensions for Python, Python Intellisense, Python Extension Pack | Jupyter: This supports build jupyter ipynb files from within VS Code | Code Spell Checker: Got to have it when building documents, particularly if you spell and typo like the Teacher | IntelliCode: Got to have it when creating a code file, it will sense type of code by extension. Also, it help with syntax as you are coding. | . Review Details in Marketplace for better explanation of purpose of the things explained above. There is a lot more! As you need Git help look at things like Git History and GitLens. Or, perhaps you enjoy Vim and want Vim emulation for editing, their is an extension for that. Later, there may be interest in AWS Toolkit or Deploy extensions. We will learn more about Marketplace Extensions as we do more. . . Hacks . Setup Tools and test GitHub connection. Tool and Equipment setup is like attendance, without Tools and Equipment you are effectually absent. . Change index.md to show it is REALLY YOURS. Refer to Markdown Cheet Sheet. Push a minor “index.md” change and Verify on GitHub https://code.visualstudio.com/docs/editor/versioncontrol#_git-support | Verify “index.md” change on deployed GitHub Pages | . | .",
            "url": "http://localhost:4100/testing/c4.1/2023/08/21/HTML_Image_Hack_IPYNB_2_.html",
            "relUrl": "/c4.1/2023/08/21/HTML_Image_Hack_IPYNB_2_.html",
            "date": " • Aug 21, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "IPYNB Table, Code",
            "content": "Learning College Board Pseudo Code . College Board uses a kind-of programming language in its Multiple Choice exam. There are thousands of different programming languages have been created, and more are being created every year. College Board has designed a pseudo code, a non operational programming language, to highlight concepts that it wants every student to learn. . College Board is trying to remain neutral and build Computer Science Principles off of any language, thus the Teacher is left to pick the language(s) according to application and curriculum. . College Board Pseudo Code Exam Reference Sheet . Comparison of CB Pseudo Code to Python with descriptions . Command Vocabulary | Pseudo code | Python | Purpose | . Output | DISPLAY(expression) | print(expression, end=” “) | Displays the value of expression, followed by a space. Python defaults to newline, thus the end=” “ | . Input | a ← INPUT() | a = input(prompt) | Accepts a value from the user and returns it to the variable a. | . Assignment | a ← expression | a = expression | Evaluates expression and assigns the result to the variable a. | . Selection | IF (expression) | if expression: | Run commands in the code block associated with the selection | . Iteration n times | REPEAT n TIMES | for i in range(n): | Repeat commands in the code block associated withe the iteration n times | . Iteration expression | REPEAT UNTIL (expression) | while expression: | Repeat commands in the code block associated withe the iteration while expression is true | . List Assignment | list ← [expression1, expression2, expression3] | list = [expression1, expression2, expression3] | Assigns 3 values to list, value can be literal or expressions | . First index in List | list[1] | list[0] | Access the 1st element in the list[]. FYI, most programming languages start a zero. | . Last index in List | list[LENGTH(list)] | list[len(list) - 1] | Access the last element in the list[]. If you start at zero, last element is length - 1. | . Define Procedure | PROCEDURE name (parameter) | def name(parameter): | Create a procedure containing a sequence of programming instructions. | . Expression equals | a = b | a == b | Evaluate if assigned value of a equals assigned value of b | . Expression not equals | a ≠ b | a != b | Evaluate if assigned value of a is NOT equal to assigned value of b | . Pseudo code IF Code Block . a ← 1 b ← 1 IF (a = b) { DISPLAY(&quot;A equals B&quot;) } . # Python code if block to match Pseudo Code a = 1 b = 1 if (a == b): # Python uses indent to establish code block, Teacher use tab key print(&quot;A equals B&quot;) . A equals B . Hacks . Key Learnings. It is very important that you become fluent in “ Vocabulary” and researching problems. . Code a JavaScript cell, this must start with %%js%% in first line of cell. Match the IF condition example in this blog. . | Code a REPEAT n TIMES as described in comparison sheet in Pseudo code, Python, and JavaScript. Be sure to comment your code. REPEAT 100 TIMES | Sum all the numpers | PRINT the result | . | Reflect on our PSEUDO code and how it helped with your problem solving in these hacks. . | Maked efinition for: code block, sequence, selections, iteration. Consider a strategy to remember Pseudo Code, Python and JavaScript for these definitions. | .",
            "url": "http://localhost:4100/testing/2023/08/17/Markdown_Table_Code_Hack_IPYNB_2_.html",
            "relUrl": "/2023/08/17/Markdown_Table_Code_Hack_IPYNB_2_.html",
            "date": " • Aug 17, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "College Board Pseudo Code",
            "content": "Learning College Board Pseudo Code . College Board uses a kind-of programming language in its Multiple Choice exam. There are thousands of different programming languages have been created, and more are being created every year. College Board has designed a pseudo code, a non operational programming language, to highlight concepts that it wants every student to learn. . College Board is trying to remain neutral and build Computer Science Principles off of any language, thus the Teacher is left to pick the language(s) according to application and curriculum. . College Board Pseudo Code Exam Reference Sheet . Comparison of CB Pseudo Code to Python with descriptions . Command Vocabulary | Pseudo code | Python | Purpose | . Output | DISPLAY(expression) | print(expression, end=” “) | Displays the value of expression, followed by a space. Python defaults to newline, thus the end=” “ | . Input | a ← INPUT() | a = input(prompt) | Accepts a value from the user and returns it to the variable a. | . Assignment | a ← expression | a = expression | Evaluates expression and assigns the result to the variable a. | . Selection | IF (expression) | if expression: | Run commands in the code block associated with the selection | . Iteration n times | REPEAT n TIMES | for i in range(n): | Repeat commands in the code block associated withe the iteration n times | . Iteration expression | REPEAT UNTIL (expression) | while expression: | Repeat commands in the code block associated withe the iteration while expression is true | . List Assignment | list ← [expression1, expression2, expression3] | list = [expression1, expression2, expression3] | Assigns 3 values to list, value can be literal or expressions | . First index in List | list[1] | list[0] | Access the 1st element in the list[]. FYI, most programming languages start a zero. | . Last index in List | list[LENGTH(list)] | list[len(list) - 1] | Access the last element in the list[]. If you start at zero, last element is length - 1. | . Define Procedure | PROCEDURE name (parameter) | def name(parameter): | Create a procedure containing a sequence of programming instructions. | . Expression equals | a = b | a == b | Evaluate if assigned value of a equals assigned value of b | . Expression not equals | a ≠ b | a != b | Evaluate if assigned value of a is NOT equal to assigned value of b | . Pseudo code IF Code Block . a ← 1 b ← 1 IF (a = b) { DISPLAY(&quot;A equals B&quot;) } . # Python code if block to match Pseudo Code a = 1 b = 1 if (a == b): # Python uses indent to establish code block, Teacher use tab key print(&quot;A equals B&quot;) . Hacks . Key Learnings. It is very important that you become fluent in “ Vocabulary” and researching problems. . Code a JavaScript cell, this must start with %%js%% in first line of cell. Match the IF condition example in this blog. . | Code a REPEAT n TIMES as described in comparison sheet in Pseudo code, Python, and JavaScript. Be sure to comment your code. REPEAT 100 TIMES | Sum all the numpers | PRINT the result | . | Reflect on our PSEUDO code and how it helped with your problem solving in these hacks. . | Maked efinition for: code block, sequence, selections, iteration. Consider a strategy to remember Pseudo Code, Python and JavaScript for these definitions. | .",
            "url": "http://localhost:4100/testing/2023/08/17/AP-pseudo-vs-python_IPYNB_2_.html",
            "relUrl": "/2023/08/17/AP-pseudo-vs-python_IPYNB_2_.html",
            "date": " • Aug 17, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Tool References",
            "content": "Visual Studio Code Overview . Jupyter Notebooks Review Jupyter basics 6-min . WSL Basic Commands . Linux Commands Cheat Sheet . Docker Docker Overview .",
            "url": "http://localhost:4100/testing/2023/08/16/Tools_Help.html",
            "relUrl": "/2023/08/16/Tools_Help.html",
            "date": " • Aug 16, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "JS Mario",
            "content": "Overview | Player | Platform | Tube | Block | Goomba | Background | . %%html &lt;style&gt; #canvas { margin: 0; border: 1px solid white; } &lt;/style&gt; &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt; &lt;script&gt; // Create empty canvas let canvas = document.getElementById(&#39;canvas&#39;); let c = canvas.getContext(&#39;2d&#39;); // Set the canvas dimensions canvas.width = 650; canvas.height = 400; // Define gravity value let gravity = 1.5; // Define the Player class class Player { constructor() { // Initial position and velocity of the player this.position = { x: 100, y: 200 }; this.velocity = { x: 0, y: 0 }; // Dimensions of the player this.width = 30; this.height = 30; } // Method to draw the player on the canvas draw() { c.fillStyle = &#39;red&#39;; c.fillRect(this.position.x, this.position.y, this.width, this.height); } // Method to update the players position and velocity update() { this.draw(); this.position.y += this.velocity.y; this.position.x += this.velocity.x; // Apply gravity if player is not at the bottom if (this.position.y + this.height + this.velocity.y &lt;= canvas.height) this.velocity.y += gravity; else this.velocity.y = 0; } } //-- // NEW CODE - PLATFORM //-- // Define the Platform class class Platform { constructor(image) { // Initial position of the platform this.position = { x: 0, y: 300 } this.image = image; this.width = 650; this.height = 100; } // Method to draw the platform on the canvas draw() { c.drawImage(this.image, this.position.x, this.position.y, this.width, this.height); } } //-- // NEW CODE - CREATE PLATFORM OBJECT WITH IMAGE //-- // Load platform image let image = new Image(); image.src = &#39;/testing/Team-Project/images/brick_wall.png&#39;; // Create a platform object let platform = new Platform(image); // Create a player object player = new Player(); // Define keyboard keys and their states let keys = { right: { pressed: false }, left: { pressed: false } } // Animation function to continuously update and render the canvas function animate() { requestAnimationFrame(animate); c.clearRect(0, 0, canvas.width, canvas.height); //-- // NEW CODE - DRAW PLATFORM //-- platform.draw(); player.update(); // Control players horizontal movement if (keys.right.pressed &amp;&amp; player.position.x + player.width &lt;= canvas.width - 50) { player.velocity.x = 15; } else if (keys.left.pressed &amp;&amp; player.position.x &gt;= 50) { player.velocity.x = -15; } else { player.velocity.x = 0; } //-- // NEW CODE - PLATFORM COLLISIONS //-- // Check for collision between player and platform if ( player.position.y + player.height &lt;= platform.position.y &amp;&amp; player.position.y + player.height + player.velocity.y &gt;= platform.position.y &amp;&amp; player.position.x + player.width &gt;= platform.position.x &amp;&amp; player.position.x &lt;= platform.position.x + platform.width ) { player.velocity.y = 0; } } // Start the animation loop animate(); // Event listener for keydown events addEventListener(&#39;keydown&#39;, ({ keyCode }) =&gt; { switch (keyCode) { case 65: console.log(&#39;left&#39;); keys.left.pressed = true; break; case 83: console.log(&#39;down&#39;); break; case 68: console.log(&#39;right&#39;); keys.right.pressed = true; break; case 87: console.log(&#39;up&#39;); player.velocity.y -= 20; break; } }); // Event listener for keyup events addEventListener(&#39;keyup&#39;, ({ keyCode }) =&gt; { switch (keyCode) { case 65: console.log(&#39;left&#39;); keys.left.pressed = false; break; case 83: console.log(&#39;down&#39;); break; case 68: console.log(&#39;right&#39;); keys.right.pressed = false; break; case 87: console.log(&#39;up&#39;); player.velocity.y = -20; break; } }) &lt;/script&gt; . Specific Hack . Add creative “death pits” (gap between platforms) that restart game if fallen through | . Open Ended Hack . Experiment with different terrains (ice could cause sliding) | .",
            "url": "http://localhost:4100/testing/2023/08/02/mario_platform_copy_IPYNB_2_.html",
            "relUrl": "/2023/08/02/mario_platform_copy_IPYNB_2_.html",
            "date": " • Aug 2, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "JS Mario 2-Platform",
            "content": "Overview | Player | Platform | Tube | Block | Goomba | Background | . %%html &lt;style&gt; canvas { margin: 0; border: 1px solid white; } &lt;/style&gt; &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt; &lt;script&gt; // Create empty canvas let canvas = document.getElementById(&#39;canvas&#39;); let c = canvas.getContext(&#39;2d&#39;); // Set the canvas dimensions canvas.width = 650; canvas.height = 400; // Define gravity value let gravity = 1.5; // Define the Player class class Player { constructor() { // Initial position and velocity of the player this.position = { x: 100, y: 200 }; this.velocity = { x: 0, y: 0 }; // Dimensions of the player this.width = 30; this.height = 30; } // Method to draw the player on the canvas draw() { c.fillStyle = &#39;red&#39;; c.fillRect(this.position.x, this.position.y, this.width, this.height); } // Method to update the players position and velocity update() { this.draw(); this.position.y += this.velocity.y; this.position.x += this.velocity.x; // Apply gravity if player is not at the bottom if (this.position.y + this.height + this.velocity.y &lt;= canvas.height) this.velocity.y += gravity; else this.velocity.y = 0; } } //-- // NEW CODE - PLATFORM //-- // Define the Platform class class Platform { constructor(image) { // Initial position of the platform this.position = { x: 0, y: 300 } this.image = image; this.width = 650; this.height = 100; } // Method to draw the platform on the canvas draw() { c.drawImage(this.image, this.position.x, this.position.y, this.width, this.height); } } //-- // NEW CODE - CREATE PLATFORM OBJECT WITH IMAGE //-- // Load platform image let image = new Image(); image.src = &#39;https://samayass.github.io/samayaCSA/images/platform.png&#39; // Create a platform object let platform = new Platform(image); // Create a player object player = new Player(); // Define keyboard keys and their states let keys = { right: { pressed: false }, left: { pressed: false } } // Animation function to continuously update and render the canvas function animate() { requestAnimationFrame(animate); c.clearRect(0, 0, canvas.width, canvas.height); //-- // NEW CODE - DRAW PLATFORM //-- platform.draw(); player.update(); // Control players horizontal movement if (keys.right.pressed &amp;&amp; player.position.x + player.width &lt;= canvas.width - 50) { player.velocity.x = 15; } else if (keys.left.pressed &amp;&amp; player.position.x &gt;= 50) { player.velocity.x = -15; } else { player.velocity.x = 0; } //-- // NEW CODE - PLATFORM COLLISIONS //-- // Check for collision between player and platform if ( player.position.y + player.height &lt;= platform.position.y &amp;&amp; player.position.y + player.height + player.velocity.y &gt;= platform.position.y &amp;&amp; player.position.x + player.width &gt;= platform.position.x &amp;&amp; player.position.x &lt;= platform.position.x + platform.width ) { player.velocity.y = 0; } } // Start the animation loop animate(); // Event listener for keydown events addEventListener(&#39;keydown&#39;, ({ keyCode }) =&gt; { switch (keyCode) { case 65: console.log(&#39;left&#39;); keys.left.pressed = true; break; case 83: console.log(&#39;down&#39;); break; case 68: console.log(&#39;right&#39;); keys.right.pressed = true; break; case 87: console.log(&#39;up&#39;); player.velocity.y -= 20; break; } }); // Event listener for keyup events addEventListener(&#39;keyup&#39;, ({ keyCode }) =&gt; { switch (keyCode) { case 65: console.log(&#39;left&#39;); keys.left.pressed = false; break; case 83: console.log(&#39;down&#39;); break; case 68: console.log(&#39;right&#39;); keys.right.pressed = false; break; case 87: console.log(&#39;up&#39;); player.velocity.y = -20; break; } }) &lt;/script&gt; . Specific Hack . Add creative “death pits” (gap between platforms) that restart game if fallen through | . Open Ended Hack . Experiment with different terrains (ice could cause sliding) | .",
            "url": "http://localhost:4100/testing/2023/08/02/mario_platform_IPYNB_2_.html",
            "relUrl": "/2023/08/02/mario_platform_IPYNB_2_.html",
            "date": " • Aug 2, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Live Review 1",
            "content": "Updates to our website for this week . Added globe image | Added table on homepage | Added mario to home page (3 files added from teacher repo: Index.md, mario_metadata, Mario_image) | Font change | Changed where header was (changed to add the header_nav) | Added our 3 games (From previous trimester) | Changed the tite | . Problem with Mario animation on homepage . When we added our mario animation, one thing we forgot to define the image, and this caused the metadata to be messed up, and make the mario not show up. .",
            "url": "http://localhost:4100/testing/2023/08/02/Accomplishments_IPYNB_2_.html",
            "relUrl": "/2023/08/02/Accomplishments_IPYNB_2_.html",
            "date": " • Aug 2, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "CSSE",
          "content": "",
          "url": "http://localhost:4100/testing/AC_csse.html",
          "relUrl": "/AC_csse.html",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Computer Science Lab Notebook",
          "content": "",
          "url": "http://localhost:4100/testing/AD_compsci.html",
          "relUrl": "/AD_compsci.html",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "",
          "url": "http://localhost:4100/testing/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
      ,"page6": {
          "title": "",
          "content": "",
          "url": "http://localhost:4100/testing/game/",
          "relUrl": "/game/",
          "date": ""
      }
      
  

  
      ,"page7": {
          "title": "",
          "content": "start . . . .",
          "url": "http://localhost:4100/testing/game2/",
          "relUrl": "/game2/",
          "date": ""
      }
      
  

  
      ,"page8": {
          "title": "",
          "content": "CodeClimbers . CodeClimbers . Home | About | Blogs | Help | Settings | Timebox | .",
          "url": "http://localhost:4100/testing/game3/",
          "relUrl": "/game3/",
          "date": ""
      }
      
  

  
      ,"page9": {
          "title": "",
          "content": "Game . CodeClimbers CodeClimbers CodeClimbers CodeClimbers . .",
          "url": "http://localhost:4100/testing/gameRedirect",
          "relUrl": "/gameRedirect",
          "date": ""
      }
      
  

  

  
  

  
  

  
  

  
  

}